// Generated by CoffeeScript 1.8.0
(function() {
  var app, express, path, platforms, sendPlatformRequest, unirest,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  express = require('express');

  unirest = require('unirest');

  path = require('path');

  app = express();

  app.use(express["static"](__dirname + '/public'));

  platforms = {
    youtube: {
      url: function(q) {
        return "https://www.googleapis.com/youtube/v3/search?part=snippet&q=" + q + "&key=AIzaSyAblW50IPEIhbEqcAkgXwYeRR_3rYDDIms";
      },
      headers: {},
      parser: function(request) {
        var item, obj, res, _ref, _ref1;
        res = [];
        if ((function() {
          var _i, _len, _ref, _results;
          _ref = request.items;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            _results.push(request.items != null);
          }
          return _results;
        })()) {
          obj = {
            img: ((_ref = item.snippet.thumbnails) != null ? (_ref1 = _ref.high) != null ? _ref1.url : void 0 : void 0) || "",
            title: item.snippet.title,
            url: "http://youtube.com/watch?v=" + item.id.videoId,
            source: "youtube"
          };
          console.log(obj);
          res.push(obj);
        }
        return res;
      }
    },
    spotify: {
      url: function(q) {
        return "https://api.spotify.com/v1/search?q=" + q + "&type=track";
      },
      headers: {},
      parser: function(request) {
        var item, obj, res, title, _i, _len, _ref, _ref1, _ref2;
        console.log(request);
        res = [];
        _ref1 = (_ref = request.tracks) != null ? _ref.items : void 0;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          title = ((_ref2 = item.artists) != null ? _ref2[0] : void 0) != null ? "" + item.artists[0].name + " - " : "";
          title += item.name;
          obj = {
            title: title,
            img: item.album.images[0].url,
            url: item.external_urls.spotify,
            source: "spotify"
          };
          res.push(obj);
          console.log(item);
        }
        return res;
      }
    },
    soundcloud: {
      url: function(q) {
        return "http://api.soundcloud.com/tracks.json?client_id=c280d0c248513cfc78d7ee05b52bf15e&q=" + q + "&limit=10";
      },
      headers: {},
      parser: function(request) {
        var item, obj, res, _i, _len, _ref;
        res = [];
        if (request.length) {
          for (_i = 0, _len = request.length; _i < _len; _i++) {
            item = request[_i];
            obj = {
              img: item.artwork_url != null ? item.artwork_url.replace('large', 't500x500').split('?')[0] : (_ref = item.user) != null ? _ref.avatar_url.replace('large', 't500x500').split('?')[0] : void 0,
              title: item.user.username + " - " + item.title,
              url: item.permalink_url,
              source: "soundcloud"
            };
            res.push(obj);
          }
        }
        return res;
      }
    }
  };

  sendPlatformRequest = function(q, platform, callback) {
    if (__indexOf.call(Object.keys(platforms), platform) < 0) {
      callback({
        r: 'sorry, no can do'
      });
      return false;
    }
    return unirest.get(platforms[platform].url(q)).headers(platforms[platform].headers).end(function(r) {
      return callback(platforms[platform].parser(r.body));
    });
  };

  app.get('/', function(req, res) {
    return res.sendFile(path.join(__dirname, '/public', 'index.html'));
  });

  app.get('/platforms/:platform', function(req, res) {
    return sendPlatformRequest(req.query.q, req.param("platform"), (function(_this) {
      return function(r) {
        return res.json(r);
      };
    })(this));
  });

  app.listen(3001);

}).call(this);
